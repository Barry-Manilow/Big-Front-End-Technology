
##事件定义
事件并不是代码世界里的专用词，它仅仅是由简单的：监听、变化、通知 三要素组成

在前端世界中，事件可以定义为：代码监听（用户），（用户）操作产生变化、（程序员）得到通知。

##如何监听事件
DOM level 0 事件监听方法：
```
button.onclick = function(){}
```
这种方法是DOM level0就支持一种方法。可以用作简单的监听。这个方法存在一个很大的问题。那就是如果一个元素绑定事件时，有可能覆盖掉前面已经绑定好的事件。

DOM level 2 事件监听方法： 
```
button.addEventListener('click', function(){})
```
这种方法和level 0的绑定方法是一致 ，但监听事件每次都会生产一个全新的匿名函数，和前面的函数完全不同，不会覆盖掉前面已经绑定好的时间。

##冒泡&捕获机制
![img_2.png](../StaticSource/EventBubble.webp)
冒泡阶段：事件从事件目标(target)开始，往上冒泡直到页面的最上一级标签。  
捕获阶段：相反的，事件从最上一级标签开始往下查找，直到捕获到事件目标(target)。
如果想阻止事件冒泡，可以使用e.stopPropagation()（Firefox）或者e.cancelBubble=true（IE）来阻止事件的冒泡传播。

##原生JS实现事件委托
dom特性：一个元素的父元素绑定了监听事件，而本身没有绑定监听事件。如果该元素被点击，也会触发父元素的监听事件  
举例：有一个ul，里面有4个li，要给每个li绑定一个监听事件  
ul如下：  
```html
    <ul id="ul">
        <li id="li1">1</li>
        <li id="li2">2</li>
        <li id="li3">3</li>
        <li id="li4">4</li>
    </ul>
```
方法1：
```jsregexp
li1.addEventListener('click', function() {})
li2.addEventListener('click', function() {})
li3.addEventListener('click', function() {})
li4.addEventListener('click', function() {})
```
所有li事件的执行的函数都一样，li个数很多，这样写很麻烦。尤其是li个数不确定的时候，此时我们新增一个li，很显然，新增的li并没有绑定监听事件。
方法2：
```jsregexp
addButton.onclick = function(){
  var li = document.createElement('li')
  li.textContent = 'new'  
  document.querySelector('ul').appendChild(li)
}
//新增了li，但没有自动绑定监听事件
```
但是，在此例子中，如果点击了li，这个时候不也等于点击了ul吗？（参考上述基础）
因此可以直接把点击事件绑定在ul上  
```jsregexp
var ul = document.getElementById('ul')
ul.addEventListener('click', function() {})
```

参考文章：https://www.jianshu.com/p/423a33d60f2f